type Project {
  name: String!
  id: String!
  peopleWorkedOn: [Person!]!
    @relationship(type: "HAS_EXPERIENCE", direction: IN)
  assessments: [AssessmentCompletion!]!
    @relationship(type: "ASSESSMENT_FOR", direction: IN)
}

type AssessmentCompletion {
  completedBy: [Person!]! @relationship(type: "COMPLETED", direction: IN)
  projectAssessed: [Project!]!
    @relationship(type: "ASSESSMENT_FOR", direction: OUT)
  skillsUsed: [Skill!]!
    @relationship(type: "USES_SKILL", direction: OUT, properties: "UsesSkill")
}

interface UsesSkill @relationshipProperties {
  rating: Int!
}

type Person {
  name: String!
  id: String!
  knownSkills: [Skill!]!
    @relationship(type: "HAS_SKILL", direction: OUT, properties: "HasSkill")
  knownCerts: [Certification!]! @relationship(type: "ACQUIRED", direction: OUT)
  projectsWorkedOn: [Project!]!
    @relationship(type: "HAS_EXPERIENCE", direction: OUT)
  projectAssessments: [AssessmentCompletion!]!
    @relationship(type: "COMPLETED", direction: OUT)
}

interface HasSkill @relationshipProperties {
  rating: Int!
}

type Skill {
  name: String!
  id: String!
  categories: [SkillCategory!]!
    @cypher(
      statement: """
      MATCH (this:Skill)-[:SUB_CLASS_OF*1..]->(s:SkillCategory)
      RETURN s
      """
    )
}

input RequiredSkill {
  skillId: String!
  minRating: Int!
  minProjects: Int!
}

type SkillCategory {
  name: String!
  id: String!
  childSkills: [Skill!]!
    @cypher(
      statement: """
      MATCH (this:SkillCategory)<-[:SUB_CLASS_OF*1..]-(s:Skill)
      RETURN DISTINCT s
      """
    )
}

input RequiredCategory {
  categoryId: String!
  minSkills: Int!
  minRating: Int!
  minProjects: Int!
}

type Prompt {
  id: String!
  question: String!
  type: String!
  correctAnswer: String
  choices: [String!]
}

input RequiredPrompt {
  question: String!
  type: String!
  choices: [String!]!
  correctAnswer: String!
}

type Certification {
  name: String!
  id: String!
}

input RequiredCert {
  certId: String!
}

interface RequirementFor @relationshipProperties {
  minRating: Int
  minSkills: Int
  minProjects: Int
}

type Knowledge {
  name: String!
  description: String!
  id: String!
  requiredPrompts: [Prompt!]!
    @relationship(
      type: "REQUIREMENT_FOR"
      direction: IN
      properties: "RequirementFor"
    )
  requiredCerts: [Certification!]!
    @relationship(
      type: "REQUIREMENT_FOR"
      direction: IN
      properties: "RequirementFor"
    )
  requiredSkills: [Skill!]!
    @relationship(
      type: "REQUIREMENT_FOR"
      direction: IN
      properties: "RequirementFor"
    )
  requiredCategories: [SkillCategory!]!
    @relationship(
      type: "REQUIREMENT_FOR"
      direction: IN
      properties: "RequirementFor"
    )
}

type Competency {
  levels: [Int!]!
  name: String!
  id: String!
}

type CompTreeNode @exclude {
  name: String!
  id: String!
  type: String!
  level: Int!
  parent: String
  description: String
  levels: [Int!]
  completed: Boolean!
}

type CompSupertreeNode @exclude {
  name: String!
  id: String!
  parent: String
}

type Query {
  getCompetencyTree(rootId: String!): [CompTreeNode!]!
    @cypher(
      statement: """
      MATCH (c:Competency {id: $rootId})-[:IS_PREREQUISITE*0..]->(k)
      OPTIONAL MATCH (k)<-[r:IS_PREREQUISITE]-(p)
      WHERE exists((p)<-[:IS_PREREQUISITE*0..]-(c))
      RETURN {name: k.name,
      id: k.id, type: labels(k)[0],
      level: COALESCE(r.level, 0),
      parent: p.id,
      description: COALESCE(k.description, ''),
      levels: k.levels,
      completed: CASE WHEN k:Competency THEN exists((k)<-[:HAS_COMPETENCY]-(:Person)) ELSE exists((k)<-[:HAS_KNOWLEDGE]-(:Person)) END}
      """
    )

  getCompetencyComposition: [CompSupertreeNode!]!
    @cypher(
      statement: """
      MATCH (c:Competency)
      OPTIONAL MATCH (c)<-[:LEADS_TO]-(p:Competency)
      RETURN {name: c.name, id: c.id, parent: p.id}
      """
    )
}

type Mutation {
  addKnowledgeToTree(
    parentId: String!
    knowledgeId: String!
    level: Int!
  ): Knowledge
    @cypher(
      statement: """
      MATCH (p {id: $parentId})
      MATCH (k:Knowledge {id: $knowledgeId})
      CREATE (p)-[:IS_PREREQUISITE {level: $level}]->(k)
      RETURN k
      """
    )

  mergeCompetency(id: String!, name: String!, levels: [Int!]!): Competency
    @cypher(
      statement: """
      MERGE (c:Competency {id: $id})
      ON CREATE
        SET c.name = $name, c.levels = $levels
      ON MATCH
        SET c.levels = $levels
      RETURN c
      """
    )

  composeCompetencies(parentId: String!, childId: String!): Competency
    @cypher(
      statement: """
      MATCH (p:Competency {id: $parentId})
      MATCH (c:Competency {id: $childId})
      CREATE (p)-[:LEADS_TO]->(c)
      RETURN c
      """
    )

  attachRequiredSkills(
    knowledgeId: String!
    requiredSkills: [RequiredSkill!]!
  ): Knowledge
    @cypher(
      statement: """
      MATCH (k:Knowledge {id: $knowledgeId})
      UNWIND $requiredSkills as skill
      MATCH (s:Skill {id: skill.skillId})
      CREATE (s)-[:REQUIREMENT_FOR {minRating: skill.minRating, minProjects: skill.minProjects}]->(k)
      WITH k, count(*) as dummy
      RETURN k
      """
    )

  attachRequiredCategories(
    knowledgeId: String!
    requiredCategories: [RequiredCategory!]!
  ): Knowledge
    @cypher(
      statement: """
      MATCH (k:Knowledge {id: $knowledgeId})
      UNWIND $requiredCategories as category
      MATCH (c:SkillCategory {id: category.categoryId})
      CREATE (c)-[:REQUIREMENT_FOR {minSkills: category.minSkills, minRating: category.minRating, minProjects: category.minProjects}]->(k)
      WITH k, count(*) as dummy
      RETURN k
      """
    )

  attachRequiredCerts(
    knowledgeId: String!
    requiredCerts: [RequiredCert!]!
  ): Knowledge
    @cypher(
      statement: """
      MATCH (k:Knowledge {id: $knowledgeId})
      UNWIND $requiredCerts as cert
      MATCH (c:Certification {id: cert.certId})
      CREATE (c)-[:REQUIREMENT_FOR]->(k)
      WITH k, count(*) as dummy
      RETURN k
      """
    )

  attachRequiredPrompts(
    knowledgeId: String!
    requiredPrompts: [RequiredPrompt!]!
  ): Knowledge
    @cypher(
      statement: """
      MATCH (k:Knowledge {id: $knowledgeId})
      UNWIND $requiredPrompts as prompt
      CREATE (:Prompt {id: randomUUID(), question: prompt.question, type: prompt.type, correctAnswer: prompt.correctAnswer, choices: prompt.choices})-[:REQUIREMENT_FOR]->(k)
      WITH k, count(*) as dummy
      RETURN k
      """
    )

  claimKnowledge(knowledgeId: String!): Knowledge
    @cypher(
      statement: """
      MATCH (p:Person)
      MATCH (k:Knowledge {id: $knowledgeId})
      CREATE (p)-[:HAS_KNOWLEDGE]->(k)
      RETURN k
      """
    )
}
